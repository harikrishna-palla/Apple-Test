// Applying a plugin to a project allows the plugin to extend the projectâ€™s capabilities
plugins {
    id 'org.springframework.boot' version '2.1.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'war'
}
//effectively a namespace for identifying the artifact
group = 'com.apple'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

//Configuration represents a group of artifacts and their dependencies
//configuration contains the runtime classpath of this library
configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
    /*maven {
        url "http://repo.mycompany.com/maven2"
    }*/
}
//Test dependencies. This is where you should declare dependencies which are used to compile tests.
dependencies {
   implementation 'org.springframework.boot:spring-boot-starter-web'
    //implementation 'io.springfox:springfox-swagger2:2.7.0'
   // implementation 'io.springfox:springfox-swagger-ui:2.7.0'
    /*implementation 'javax.xml.bind:jaxb-api:2.3.0'*/
   /* implementation 'org.hibernate:hibernate-core:3.6.7.Final'*/
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

}
//Test : The test task automatically detects and executes all unit tests in the test source set.
// It also generates a report once test execution is complete
test {
    useJUnitPlatform()
  //  ignoreFailures=true;
}

/*task hello {
    println "Print something and write something"
}*/

//task copy(type: Copy) {
//    description 'Copies the resource directory to the target directory.'
//    from 'C:\\SB\\DockerNew\\build\\libs\\DockerNew-0.0.1-SNAPSHOT.jar', 'C:\\SB\\DockerNew\\build\\libs\\test1\\test2\\Test.txt'
//    into 'C:\\Users\\harikrishnapa\\Desktop\\Apple Docs'
//    include('**/*.txt', '**/*.jar', '**/*.properties')
//    println("description applied")
//}
/*
task ensureDirectory {
    doLast {
        mkdir "storedFiles"
        println("directory created")
    }

}*/
/*task copyMultiFIles(type: Copy) {

    description('copying muliple files')
    from 'C:\\SB\\DockerNew\\build\\libs'
    into 'C:\\Users\\harikrishnapa\\Desktop\\Apple Docs'*/
 //   include('**/*.txt', '**/*.jar', '**/*.properties')
 /*   println('copied multiple files')

}
*/
/*task dir{
    mkdir "$buildDir/reports"
    mkdir "$buildDir/toArchive"

}*/
/*task copyReportsDirForArchiving(type: Copy) {
    mkdir "$buildDir/toArchive"
    from "$buildDir/classes"
    into "$buildDir/toArchive"
    println"$buildDir"
}


task packageDistribution(type: Tar) {
    archiveFileName = "my-distribution.tar"
    mkdir "$buildDir/reports"
    destinationDirectory = file("$buildDir/reports")

    from "$buildDir/toArchive"
}*/
/*
task unpackFiles(type: Copy) {
    mkdir "$buildDir/resources"
    from zipTree("$buildDir/reports/my-distribution.zip")
    into "$buildDir/resources"
}
*/
/*

task uberJar(type: Jar) {

    archiveClassifier = 'uber'

    from sourceSets.main.output // com.apple.demo

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
}
*/

/*task moveReports {
    doLast {
        ant.move file: "${buildDir}/classes",
                todir: "${buildDir}/toArchive"
    }
}*/
/*

task copyFromStaging(type: Copy) {
    from "${buildDir}/reports"
    into "${buildDir}/toArchive"

    rename '(.+)-Count(.+)', '$1$2'
}
onfigFile = file(Paths.get('src', 'config.xml'))
*/
/*

task packageDistribution(type: Zip) {
    mkdir "$buildDir/toArchive"
    archiveFileName = "my-distribution.zip"
    destinationDirectory = file("$buildDir/classes")

    from "$buildDir/toArchive"
}*/
